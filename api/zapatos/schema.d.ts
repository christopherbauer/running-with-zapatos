/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module "zapatos/schema" {
	import type * as db from "zapatos/db";

	// got a type error on schemaVersionCanary below? update by running `npx zapatos`
	export interface schemaVersionCanary extends db.SchemaVersionCanary {
		version: 104;
	}

	/* === schema: public === */

	/* --- enums --- */
	/* (none) */

	/* --- tables --- */

	/**
	 * **Address**
	 * - Table in database
	 */
	export namespace Address {
		export type Table = "Address";
		export interface Selectable {
			/**
			 * **Address.address_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Address_address_id_seq"'::regclass)`
			 */
			address_id: number;
			/**
			 * **Address.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id: number | null;
			/**
			 * **Address.street**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			street: string;
			/**
			 * **Address.city**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			city: string;
			/**
			 * **Address.state**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			state: string;
			/**
			 * **Address.country**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			country: string;
			/**
			 * **Address.postal_code**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			postal_code: string;
		}
		export interface JSONSelectable {
			/**
			 * **Address.address_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Address_address_id_seq"'::regclass)`
			 */
			address_id: number;
			/**
			 * **Address.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id: number | null;
			/**
			 * **Address.street**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			street: string;
			/**
			 * **Address.city**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			city: string;
			/**
			 * **Address.state**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			state: string;
			/**
			 * **Address.country**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			country: string;
			/**
			 * **Address.postal_code**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			postal_code: string;
		}
		export interface Whereable {
			/**
			 * **Address.address_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Address_address_id_seq"'::regclass)`
			 */
			address_id?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Address.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Address.street**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			street?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Address.city**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			city?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Address.state**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			state?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Address.country**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			country?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Address.postal_code**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			postal_code?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| db.SQLFragment
						| db.ParentColumn
				  >;
		}
		export interface Insertable {
			/**
			 * **Address.address_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Address_address_id_seq"'::regclass)`
			 */
			address_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **Address.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id?:
				| number
				| db.Parameter<number>
				| null
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **Address.street**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			street: string | db.Parameter<string> | db.SQLFragment;
			/**
			 * **Address.city**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			city: string | db.Parameter<string> | db.SQLFragment;
			/**
			 * **Address.state**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			state: string | db.Parameter<string> | db.SQLFragment;
			/**
			 * **Address.country**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			country: string | db.Parameter<string> | db.SQLFragment;
			/**
			 * **Address.postal_code**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			postal_code: string | db.Parameter<string> | db.SQLFragment;
		}
		export interface Updatable {
			/**
			 * **Address.address_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Address_address_id_seq"'::regclass)`
			 */
			address_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **Address.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id?:
				| number
				| db.Parameter<number>
				| null
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| null
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **Address.street**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			street?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						string | db.Parameter<string> | db.SQLFragment
				  >;
			/**
			 * **Address.city**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			city?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						string | db.Parameter<string> | db.SQLFragment
				  >;
			/**
			 * **Address.state**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			state?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						string | db.Parameter<string> | db.SQLFragment
				  >;
			/**
			 * **Address.country**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			country?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						string | db.Parameter<string> | db.SQLFragment
				  >;
			/**
			 * **Address.postal_code**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			postal_code?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						string | db.Parameter<string> | db.SQLFragment
				  >;
		}
		export type UniqueIndex = "Address_pkey";
		export type Column = keyof Selectable;
		export type OnlyCols<T extends readonly Column[]> = Pick<
			Selectable,
			T[number]
		>;
		export type SQLExpression =
			| Table
			| db.ColumnNames<Updatable | (keyof Updatable)[]>
			| db.ColumnValues<Updatable>
			| Whereable
			| Column
			| db.ParentColumn
			| db.GenericSQLExpression;
		export type SQL = SQLExpression | SQLExpression[];
	}

	/**
	 * **Order**
	 * - Table in database
	 */
	export namespace Order {
		export type Table = "Order";
		export interface Selectable {
			/**
			 * **Order.order_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Order_order_id_seq"'::regclass)`
			 */
			order_id: number;
			/**
			 * **Order.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id: number | null;
			/**
			 * **Order.order_date**
			 * - `date` in database
			 * - `NOT NULL`, no default
			 */
			order_date: Date;
			/**
			 * **Order.total_amount**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			total_amount: number;
			/**
			 * **Order.status**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			status: string;
		}
		export interface JSONSelectable {
			/**
			 * **Order.order_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Order_order_id_seq"'::regclass)`
			 */
			order_id: number;
			/**
			 * **Order.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id: number | null;
			/**
			 * **Order.order_date**
			 * - `date` in database
			 * - `NOT NULL`, no default
			 */
			order_date: db.DateString;
			/**
			 * **Order.total_amount**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			total_amount: number;
			/**
			 * **Order.status**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			status: string;
		}
		export interface Whereable {
			/**
			 * **Order.order_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Order_order_id_seq"'::regclass)`
			 */
			order_id?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Order.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Order.order_date**
			 * - `date` in database
			 * - `NOT NULL`, no default
			 */
			order_date?:
				| (db.DateString | Date)
				| db.Parameter<db.DateString | Date>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| (db.DateString | Date)
						| db.Parameter<db.DateString | Date>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Order.total_amount**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			total_amount?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Order.status**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			status?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| db.SQLFragment
						| db.ParentColumn
				  >;
		}
		export interface Insertable {
			/**
			 * **Order.order_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Order_order_id_seq"'::regclass)`
			 */
			order_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **Order.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id?:
				| number
				| db.Parameter<number>
				| null
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **Order.order_date**
			 * - `date` in database
			 * - `NOT NULL`, no default
			 */
			order_date:
				| (db.DateString | Date)
				| db.Parameter<db.DateString | Date>
				| db.SQLFragment;
			/**
			 * **Order.total_amount**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			total_amount: number | db.Parameter<number> | db.SQLFragment;
			/**
			 * **Order.status**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			status: string | db.Parameter<string> | db.SQLFragment;
		}
		export interface Updatable {
			/**
			 * **Order.order_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Order_order_id_seq"'::regclass)`
			 */
			order_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **Order.user_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			user_id?:
				| number
				| db.Parameter<number>
				| null
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| null
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **Order.order_date**
			 * - `date` in database
			 * - `NOT NULL`, no default
			 */
			order_date?:
				| (db.DateString | Date)
				| db.Parameter<db.DateString | Date>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| (db.DateString | Date)
						| db.Parameter<db.DateString | Date>
						| db.SQLFragment
				  >;
			/**
			 * **Order.total_amount**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			total_amount?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						number | db.Parameter<number> | db.SQLFragment
				  >;
			/**
			 * **Order.status**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			status?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						string | db.Parameter<string> | db.SQLFragment
				  >;
		}
		export type UniqueIndex = "Order_pkey";
		export type Column = keyof Selectable;
		export type OnlyCols<T extends readonly Column[]> = Pick<
			Selectable,
			T[number]
		>;
		export type SQLExpression =
			| Table
			| db.ColumnNames<Updatable | (keyof Updatable)[]>
			| db.ColumnValues<Updatable>
			| Whereable
			| Column
			| db.ParentColumn
			| db.GenericSQLExpression;
		export type SQL = SQLExpression | SQLExpression[];
	}

	/**
	 * **OrderItem**
	 * - Table in database
	 */
	export namespace OrderItem {
		export type Table = "OrderItem";
		export interface Selectable {
			/**
			 * **OrderItem.order_item_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"OrderItem_order_item_id_seq"'::regclass)`
			 */
			order_item_id: number;
			/**
			 * **OrderItem.order_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			order_id: number | null;
			/**
			 * **OrderItem.product_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			product_id: number | null;
			/**
			 * **OrderItem.quantity**
			 * - `int4` in database
			 * - `NOT NULL`, no default
			 */
			quantity: number;
			/**
			 * **OrderItem.price_per_unit**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price_per_unit: number;
		}
		export interface JSONSelectable {
			/**
			 * **OrderItem.order_item_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"OrderItem_order_item_id_seq"'::regclass)`
			 */
			order_item_id: number;
			/**
			 * **OrderItem.order_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			order_id: number | null;
			/**
			 * **OrderItem.product_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			product_id: number | null;
			/**
			 * **OrderItem.quantity**
			 * - `int4` in database
			 * - `NOT NULL`, no default
			 */
			quantity: number;
			/**
			 * **OrderItem.price_per_unit**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price_per_unit: number;
		}
		export interface Whereable {
			/**
			 * **OrderItem.order_item_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"OrderItem_order_item_id_seq"'::regclass)`
			 */
			order_item_id?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **OrderItem.order_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			order_id?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **OrderItem.product_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			product_id?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **OrderItem.quantity**
			 * - `int4` in database
			 * - `NOT NULL`, no default
			 */
			quantity?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **OrderItem.price_per_unit**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price_per_unit?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
		}
		export interface Insertable {
			/**
			 * **OrderItem.order_item_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"OrderItem_order_item_id_seq"'::regclass)`
			 */
			order_item_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **OrderItem.order_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			order_id?:
				| number
				| db.Parameter<number>
				| null
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **OrderItem.product_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			product_id?:
				| number
				| db.Parameter<number>
				| null
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **OrderItem.quantity**
			 * - `int4` in database
			 * - `NOT NULL`, no default
			 */
			quantity: number | db.Parameter<number> | db.SQLFragment;
			/**
			 * **OrderItem.price_per_unit**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price_per_unit: number | db.Parameter<number> | db.SQLFragment;
		}
		export interface Updatable {
			/**
			 * **OrderItem.order_item_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"OrderItem_order_item_id_seq"'::regclass)`
			 */
			order_item_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **OrderItem.order_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			order_id?:
				| number
				| db.Parameter<number>
				| null
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| null
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **OrderItem.product_id**
			 * - `int4` in database
			 * - Nullable, no default
			 */
			product_id?:
				| number
				| db.Parameter<number>
				| null
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| null
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **OrderItem.quantity**
			 * - `int4` in database
			 * - `NOT NULL`, no default
			 */
			quantity?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						number | db.Parameter<number> | db.SQLFragment
				  >;
			/**
			 * **OrderItem.price_per_unit**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price_per_unit?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						number | db.Parameter<number> | db.SQLFragment
				  >;
		}
		export type UniqueIndex = "OrderItem_pkey";
		export type Column = keyof Selectable;
		export type OnlyCols<T extends readonly Column[]> = Pick<
			Selectable,
			T[number]
		>;
		export type SQLExpression =
			| Table
			| db.ColumnNames<Updatable | (keyof Updatable)[]>
			| db.ColumnValues<Updatable>
			| Whereable
			| Column
			| db.ParentColumn
			| db.GenericSQLExpression;
		export type SQL = SQLExpression | SQLExpression[];
	}

	/**
	 * **Product**
	 * - Table in database
	 */
	export namespace Product {
		export type Table = "Product";
		export interface Selectable {
			/**
			 * **Product.product_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Product_product_id_seq"'::regclass)`
			 */
			product_id: number;
			/**
			 * **Product.name**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			name: string;
			/**
			 * **Product.description**
			 * - `text` in database
			 * - Nullable, no default
			 */
			description: string | null;
			/**
			 * **Product.price**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price: number;
			/**
			 * **Product.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at: Date;
			/**
			 * **Product.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at: Date;
		}
		export interface JSONSelectable {
			/**
			 * **Product.product_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Product_product_id_seq"'::regclass)`
			 */
			product_id: number;
			/**
			 * **Product.name**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			name: string;
			/**
			 * **Product.description**
			 * - `text` in database
			 * - Nullable, no default
			 */
			description: string | null;
			/**
			 * **Product.price**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price: number;
			/**
			 * **Product.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at: db.TimestampString;
			/**
			 * **Product.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at: db.TimestampString;
		}
		export interface Whereable {
			/**
			 * **Product.product_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Product_product_id_seq"'::regclass)`
			 */
			product_id?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Product.name**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			name?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Product.description**
			 * - `text` in database
			 * - Nullable, no default
			 */
			description?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Product.price**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Product.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at?:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| (db.TimestampString | Date)
						| db.Parameter<db.TimestampString | Date>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **Product.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at?:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| (db.TimestampString | Date)
						| db.Parameter<db.TimestampString | Date>
						| db.SQLFragment
						| db.ParentColumn
				  >;
		}
		export interface Insertable {
			/**
			 * **Product.product_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Product_product_id_seq"'::regclass)`
			 */
			product_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **Product.name**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			name: string | db.Parameter<string> | db.SQLFragment;
			/**
			 * **Product.description**
			 * - `text` in database
			 * - Nullable, no default
			 */
			description?:
				| string
				| db.Parameter<string>
				| null
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **Product.price**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price: number | db.Parameter<number> | db.SQLFragment;
			/**
			 * **Product.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment;
			/**
			 * **Product.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment;
		}
		export interface Updatable {
			/**
			 * **Product.product_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"Product_product_id_seq"'::regclass)`
			 */
			product_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **Product.name**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			name?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						string | db.Parameter<string> | db.SQLFragment
				  >;
			/**
			 * **Product.description**
			 * - `text` in database
			 * - Nullable, no default
			 */
			description?:
				| string
				| db.Parameter<string>
				| null
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| null
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **Product.price**
			 * - `numeric` in database
			 * - `NOT NULL`, no default
			 */
			price?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						number | db.Parameter<number> | db.SQLFragment
				  >;
			/**
			 * **Product.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at?:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| (db.TimestampString | Date)
						| db.Parameter<db.TimestampString | Date>
						| db.SQLFragment
				  >;
			/**
			 * **Product.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at?:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| (db.TimestampString | Date)
						| db.Parameter<db.TimestampString | Date>
						| db.SQLFragment
				  >;
		}
		export type UniqueIndex = "Product_pkey";
		export type Column = keyof Selectable;
		export type OnlyCols<T extends readonly Column[]> = Pick<
			Selectable,
			T[number]
		>;
		export type SQLExpression =
			| Table
			| db.ColumnNames<Updatable | (keyof Updatable)[]>
			| db.ColumnValues<Updatable>
			| Whereable
			| Column
			| db.ParentColumn
			| db.GenericSQLExpression;
		export type SQL = SQLExpression | SQLExpression[];
	}

	/**
	 * **User**
	 * - Table in database
	 */
	export namespace User {
		export type Table = "User";
		export interface Selectable {
			/**
			 * **User.user_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"User_user_id_seq"'::regclass)`
			 */
			user_id: number;
			/**
			 * **User.email**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			email: string;
			/**
			 * **User.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at: Date;
			/**
			 * **User.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at: Date;
		}
		export interface JSONSelectable {
			/**
			 * **User.user_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"User_user_id_seq"'::regclass)`
			 */
			user_id: number;
			/**
			 * **User.email**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			email: string;
			/**
			 * **User.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at: db.TimestampString;
			/**
			 * **User.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at: db.TimestampString;
		}
		export interface Whereable {
			/**
			 * **User.user_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"User_user_id_seq"'::regclass)`
			 */
			user_id?:
				| number
				| db.Parameter<number>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **User.email**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			email?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| string
						| db.Parameter<string>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **User.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at?:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| (db.TimestampString | Date)
						| db.Parameter<db.TimestampString | Date>
						| db.SQLFragment
						| db.ParentColumn
				  >;
			/**
			 * **User.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at?:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment
				| db.ParentColumn
				| db.SQLFragment<
						any,
						| (db.TimestampString | Date)
						| db.Parameter<db.TimestampString | Date>
						| db.SQLFragment
						| db.ParentColumn
				  >;
		}
		export interface Insertable {
			/**
			 * **User.user_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"User_user_id_seq"'::regclass)`
			 */
			user_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment;
			/**
			 * **User.email**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			email: string | db.Parameter<string> | db.SQLFragment;
			/**
			 * **User.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment;
			/**
			 * **User.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment;
		}
		export interface Updatable {
			/**
			 * **User.user_id**
			 * - `int4` in database
			 * - `NOT NULL`, default: `nextval('"User_user_id_seq"'::regclass)`
			 */
			user_id?:
				| number
				| db.Parameter<number>
				| db.DefaultType
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| number
						| db.Parameter<number>
						| db.DefaultType
						| db.SQLFragment
				  >;
			/**
			 * **User.email**
			 * - `varchar` in database
			 * - `NOT NULL`, no default
			 */
			email?:
				| string
				| db.Parameter<string>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						string | db.Parameter<string> | db.SQLFragment
				  >;
			/**
			 * **User.created_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			created_at?:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| (db.TimestampString | Date)
						| db.Parameter<db.TimestampString | Date>
						| db.SQLFragment
				  >;
			/**
			 * **User.updated_at**
			 * - `timestamp` in database
			 * - `NOT NULL`, no default
			 */
			updated_at?:
				| (db.TimestampString | Date)
				| db.Parameter<db.TimestampString | Date>
				| db.SQLFragment
				| db.SQLFragment<
						any,
						| (db.TimestampString | Date)
						| db.Parameter<db.TimestampString | Date>
						| db.SQLFragment
				  >;
		}
		export type UniqueIndex = "User_pkey";
		export type Column = keyof Selectable;
		export type OnlyCols<T extends readonly Column[]> = Pick<
			Selectable,
			T[number]
		>;
		export type SQLExpression =
			| Table
			| db.ColumnNames<Updatable | (keyof Updatable)[]>
			| db.ColumnValues<Updatable>
			| Whereable
			| Column
			| db.ParentColumn
			| db.GenericSQLExpression;
		export type SQL = SQLExpression | SQLExpression[];
	}

	/* --- aggregate types --- */

	export namespace public {
		export type Table =
			| Address.Table
			| Order.Table
			| OrderItem.Table
			| Product.Table
			| User.Table;
		export type Selectable =
			| Address.Selectable
			| Order.Selectable
			| OrderItem.Selectable
			| Product.Selectable
			| User.Selectable;
		export type JSONSelectable =
			| Address.JSONSelectable
			| Order.JSONSelectable
			| OrderItem.JSONSelectable
			| Product.JSONSelectable
			| User.JSONSelectable;
		export type Whereable =
			| Address.Whereable
			| Order.Whereable
			| OrderItem.Whereable
			| Product.Whereable
			| User.Whereable;
		export type Insertable =
			| Address.Insertable
			| Order.Insertable
			| OrderItem.Insertable
			| Product.Insertable
			| User.Insertable;
		export type Updatable =
			| Address.Updatable
			| Order.Updatable
			| OrderItem.Updatable
			| Product.Updatable
			| User.Updatable;
		export type UniqueIndex =
			| Address.UniqueIndex
			| Order.UniqueIndex
			| OrderItem.UniqueIndex
			| Product.UniqueIndex
			| User.UniqueIndex;
		export type Column =
			| Address.Column
			| Order.Column
			| OrderItem.Column
			| Product.Column
			| User.Column;

		export type AllBaseTables = [
			Address.Table,
			Order.Table,
			OrderItem.Table,
			Product.Table,
			User.Table
		];
		export type AllForeignTables = [];
		export type AllViews = [];
		export type AllMaterializedViews = [];
		export type AllTablesAndViews = [
			Address.Table,
			Order.Table,
			OrderItem.Table,
			Product.Table,
			User.Table
		];
	}

	/* === global aggregate types === */

	export type Schema = "public";
	export type Table = public.Table;
	export type Selectable = public.Selectable;
	export type JSONSelectable = public.JSONSelectable;
	export type Whereable = public.Whereable;
	export type Insertable = public.Insertable;
	export type Updatable = public.Updatable;
	export type UniqueIndex = public.UniqueIndex;
	export type Column = public.Column;

	export type AllSchemas = ["public"];
	export type AllBaseTables = [...public.AllBaseTables];
	export type AllForeignTables = [...public.AllForeignTables];
	export type AllViews = [...public.AllViews];
	export type AllMaterializedViews = [...public.AllMaterializedViews];
	export type AllTablesAndViews = [...public.AllTablesAndViews];

	/* === lookups === */

	export type SelectableForTable<T extends Table> = {
		Address: Address.Selectable;
		Order: Order.Selectable;
		OrderItem: OrderItem.Selectable;
		Product: Product.Selectable;
		User: User.Selectable;
	}[T];

	export type JSONSelectableForTable<T extends Table> = {
		Address: Address.JSONSelectable;
		Order: Order.JSONSelectable;
		OrderItem: OrderItem.JSONSelectable;
		Product: Product.JSONSelectable;
		User: User.JSONSelectable;
	}[T];

	export type WhereableForTable<T extends Table> = {
		Address: Address.Whereable;
		Order: Order.Whereable;
		OrderItem: OrderItem.Whereable;
		Product: Product.Whereable;
		User: User.Whereable;
	}[T];

	export type InsertableForTable<T extends Table> = {
		Address: Address.Insertable;
		Order: Order.Insertable;
		OrderItem: OrderItem.Insertable;
		Product: Product.Insertable;
		User: User.Insertable;
	}[T];

	export type UpdatableForTable<T extends Table> = {
		Address: Address.Updatable;
		Order: Order.Updatable;
		OrderItem: OrderItem.Updatable;
		Product: Product.Updatable;
		User: User.Updatable;
	}[T];

	export type UniqueIndexForTable<T extends Table> = {
		Address: Address.UniqueIndex;
		Order: Order.UniqueIndex;
		OrderItem: OrderItem.UniqueIndex;
		Product: Product.UniqueIndex;
		User: User.UniqueIndex;
	}[T];

	export type ColumnForTable<T extends Table> = {
		Address: Address.Column;
		Order: Order.Column;
		OrderItem: OrderItem.Column;
		Product: Product.Column;
		User: User.Column;
	}[T];

	export type SQLForTable<T extends Table> = {
		Address: Address.SQL;
		Order: Order.SQL;
		OrderItem: OrderItem.SQL;
		Product: Product.SQL;
		User: User.SQL;
	}[T];
}
